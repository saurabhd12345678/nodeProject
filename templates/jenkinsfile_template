pipeline {
    agent none
    stages{ 
        {{#if updateStage}} 
            stage('Update Code') { 
                agent { label '{{buildAgentLabel}}' }
            checkout([$class: '{{scmType}}', branches: [[name: '*/{{branchName}}']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout']], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: '{{scmCredentialsID}}', url: '{{scmURL}}']]])
            } 
        {{/if}}

        {{#if buildStage}}
        stage('Build & Unit Test'){
        	        agent {
	            docker {
                    image '{{buildImage}}' 
                    label '{{buildAgentLabel}}' 
                    args '{{buildImageArgs}}'
		        }
	        }
		    steps {
                sh "mvn clean install {{#if buildProxy}}-DproxySet=true -DproxyHost={{buildProxyHost}} -DproxyPort={{buildProxyPort}}{{/if}}"
			}
			{{#if unitTestStage}}
            post { 
                always { 
                        //junit
                        junit 'target/surefire-reports/*.xml'
                }
            }
			{{/if}}
		}
        {{/if}} 


       {{#if codeAnalysisStage}}
       stage('Code Analysis'){
       agent {
		    docker {
            image '{{codeAnalysisImage}}'
            label '{{buildAgentLabel}}'
            args '{{codeAnalysisImageArgs}}'
		    }
		}
		steps {
				sh "sonar-scanner"
			}
		}
        {{/if}}    

       {{#if systemTestingStage}}
       stage('System Testing') {
        agent {label '{{buildAgentLabel}}'}
			steps {
			      script {
             def testcon=docker.build('{{systemTestingImageName}}').run(['--name={{systemTestingContainerName}} -p 8887:8887'])
			      }
      		    sh "docker run --privileged --rm --net=host -v /dev/shm:/dev/shm -v ${WORKSPACE}/src/test:/protractor webnicer/protractor-headless protractor-conf.js"
                sh "docker stop {{systemTestingContainerName}}"
    		    sh "docker rm {{systemTestingContainerName}}"
			}
		}
       {{/if}}

       {{#if artifactStage}}
            {{#if artifactoryType}}
                stage ('Upload Artifacts') { 
                        agent {label '{{buildAgentLabel}}'}
                        steps {
                            script {
                            def server = Artifactory.newServer url: '{{artifactURL}}', credentialsId: 'artifactory_cred'
                            def uploadSpec = 
                        """
                        {
                        "files": [
                            {
                                "pattern": "target/{{artifactName}}.war",
                                "target": "{{artifactStoragePath}}/v${env.BUILD_NUMBER}/war/"
                            }
                        ]
                        }
                        """
                        def buildInfo = Artifactory.newBuildInfo() 
                        buildInfo.env.capture = true 
                        buildInfo=server.upload(uploadSpec) 
                        server.publishBuildInfo(buildInfo)
                        }
                    }		
                }
            {{/if}}
            {{#if s3ArtifcatoryType}}
                stage ('Upload to S3') {
                    agent {label '{{buildAgentLabel}}'}
                    steps {
                        sh "aws cloudformation package --template-file {{cFTemplateFileName}}.yml --output-template /home/ubuntu/New-{{cFTemplateFileName}}.yaml --s3-bucket {{s3BucketName}}"
                    }
                } 
            {{/if}}
       {{/if}}

{{#if deploymentStage}}
	{{#if vmDeploymentType}}
    stage('Deploy') {
    agent {label '{{buildAgentLabel}}'}
    steps{
        script{
        build job: 'ansible_deployment', parameters:[[$class: 'StringParameterValue', name: 'Application', value: '{{appName}}'], [$class: 'StringParameterValue', name: 'Environment', value: '{{deploymentEnv}}'], [$class: 'StringParameterValue', name: 'Build_number', value: "${env.BUILD_NUMBER}"], [$class: 'StringParameterValue', name: 'Storage_path', value: '{{artifactStoragePath}}'],[$class: 'StringParameterValue', name: 'Artifact_name', value: '{{artifactName}}']]
            }
        }
     }
	 {{/if}}

     {{#if containerDeploymentType}}
      stage('Deploy') {
    agent {label '{{buildAgentLabel}}'}
    steps{
        script{
        docker.build("{{deployimagename}}:${currentBuild.number}")
        build job: 'ansible_docker_deployment', parameters:[[$class: 'StringParameterValue', name: 'Application', value: '{{appName}}'], [$class: 'StringParameterValue', name: 'Environment', value: '{{deploymentEnv}}'], [$class: 'StringParameterValue', name: 'ImageName', value: "{{deployimagename}}:${currentBuild.number}"]]
            }
        }   
     }
	 {{/if}}
     {{#if serverlessDeploymentType}}
    stage('Deploy') {
    agent {label '{{buildAgentLabel}}'}
    steps{
            sh "aws cloudformation deploy --template-file /home/ubuntu/New-{{cFTemplateFileName}}.yaml --stack-name {{cFStackName}}"
        }
     }
	 {{/if}}
{{/if}}
}
}
